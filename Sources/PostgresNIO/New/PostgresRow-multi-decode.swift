/// NOTE: THIS FILE IS AUTO-GENERATED BY dev/generate-postgresrow-multi-decode.sh

extension PostgresRow {
    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
) {
        precondition(self.columns.count >= 1)
        let columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        let column = columnIterator.next().unsafelyUnwrapped
        let swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
) {
        precondition(self.columns.count >= 2)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
) {
        precondition(self.columns.count >= 3)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
) {
        precondition(self.columns.count >= 4)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
) {
        precondition(self.columns.count >= 5)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
) {
        precondition(self.columns.count >= 6)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
) {
        precondition(self.columns.count >= 7)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
) {
        precondition(self.columns.count >= 8)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , T8: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
) {
        precondition(self.columns.count >= 9)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
-n , r8
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , T8: PostgresDecodable
-n , T9: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
) {
        precondition(self.columns.count >= 10)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
-n , r8
-n , r9
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , T8: PostgresDecodable
-n , T9: PostgresDecodable
-n , T10: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
) {
        precondition(self.columns.count >= 11)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
-n , r8
-n , r9
-n , r10
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , T8: PostgresDecodable
-n , T9: PostgresDecodable
-n , T10: PostgresDecodable
-n , T11: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
) {
        precondition(self.columns.count >= 12)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
-n , r8
-n , r9
-n , r10
-n , r11
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , T8: PostgresDecodable
-n , T9: PostgresDecodable
-n , T10: PostgresDecodable
-n , T11: PostgresDecodable
-n , T12: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
-n , T12
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
-n , T12
) {
        precondition(self.columns.count >= 13)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 12
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T12.self
            let r12 = try T12._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
-n , r8
-n , r9
-n , r10
-n , r11
-n , r12
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , T8: PostgresDecodable
-n , T9: PostgresDecodable
-n , T10: PostgresDecodable
-n , T11: PostgresDecodable
-n , T12: PostgresDecodable
-n , T13: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
-n , T12
-n , T13
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
-n , T12
-n , T13
) {
        precondition(self.columns.count >= 14)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 12
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T12.self
            let r12 = try T12._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 13
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T13.self
            let r13 = try T13._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
-n , r8
-n , r9
-n , r10
-n , r11
-n , r12
-n , r13
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }

    @inlinable
    @_alwaysEmitIntoClient
-n     public func decode<T0: PostgresDecodable
-n , T1: PostgresDecodable
-n , T2: PostgresDecodable
-n , T3: PostgresDecodable
-n , T4: PostgresDecodable
-n , T5: PostgresDecodable
-n , T6: PostgresDecodable
-n , T7: PostgresDecodable
-n , T8: PostgresDecodable
-n , T9: PostgresDecodable
-n , T10: PostgresDecodable
-n , T11: PostgresDecodable
-n , T12: PostgresDecodable
-n , T13: PostgresDecodable
-n , T14: PostgresDecodable
-n , JSONDecoder: PostgresJSONDecoder>(_: (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
-n , T12
-n , T13
-n , T14
-n ).Type, context: PostgresDecodingContext<JSONDecoder>, file: String = #file, line: Int = #line) throws
-n  -> (T0
-n , T1
-n , T2
-n , T3
-n , T4
-n , T5
-n , T6
-n , T7
-n , T8
-n , T9
-n , T10
-n , T11
-n , T12
-n , T13
-n , T14
) {
        precondition(self.columns.count >= 15)
        var columnIndex = 0
        var cellIterator = self.data.makeIterator()
        var cellData = cellIterator.next().unsafelyUnwrapped
        var columnIterator = self.columns.makeIterator()
        var column = columnIterator.next().unsafelyUnwrapped
        var swiftTargetType: Any.Type = T0.self

        do {
            let r0 = try T0._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 1
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T1.self
            let r1 = try T1._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 2
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T2.self
            let r2 = try T2._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 3
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T3.self
            let r3 = try T3._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 4
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T4.self
            let r4 = try T4._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 5
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T5.self
            let r5 = try T5._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 6
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T6.self
            let r6 = try T6._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 7
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T7.self
            let r7 = try T7._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 8
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T8.self
            let r8 = try T8._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 9
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T9.self
            let r9 = try T9._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 10
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T10.self
            let r10 = try T10._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 11
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T11.self
            let r11 = try T11._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 12
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T12.self
            let r12 = try T12._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 13
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T13.self
            let r13 = try T13._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

            columnIndex = 14
            cellData = cellIterator.next().unsafelyUnwrapped
            column = columnIterator.next().unsafelyUnwrapped
            swiftTargetType = T14.self
            let r14 = try T14._decodeRaw(from: &cellData, type: column.dataType, format: column.format, context: context)

-n             return (r0
-n , r1
-n , r2
-n , r3
-n , r4
-n , r5
-n , r6
-n , r7
-n , r8
-n , r9
-n , r10
-n , r11
-n , r12
-n , r13
-n , r14
)
        } catch let code as PostgresDecodingError.Code {
            throw PostgresDecodingError(
                code: code,
                columnName: column.name,
                columnIndex: columnIndex,
                targetType: swiftTargetType,
                postgresType: column.dataType,
                postgresFormat: column.format,
                postgresData: cellData,
                file: file,
                line: line
            )
        }
    }
}
